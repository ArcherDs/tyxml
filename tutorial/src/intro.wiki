= Introduction=


//This is the documentaion of the Ocsigen Framework
(development version). It explains how to use the Web server //Ocsigen server//
and how to program Web sites and client-server Web applications in
//Objective Caml// using //Eliom//. It also contains the documentation for
several tools and libraries you can use for non Ocsigen-releated projects.
* the cooperative threading library Lwt
* the database query library Macaque
* the Js_of_ocaml compiler (from Ocaml bytecode to Jacascript)
* the O'Closure library, a binding for the Google closure Javascript widget
library to be used with Js_of_ocaml.


<<div class="wip"|
This manual in under construction.
Please report any error in this tutorial
and send us your comments and suggestions!
>>

==Eliom==
            
Eliom is an extension for the //Ocsigen server//, a web server
that provides a platform for client/server Web applications (or more traditional, dynamic Web sites) in Objective Caml.
Its unique design employs several new concepts that set it apart
from all other Web programming tools.

=== High level primitives ===
Eliom allows one to build a complex Web application using just a few lines of code, by providing high level programming primitives for many aspects of Web programming: client-server communication, implementation of complex Web interaction, sessions, etc.
<<span class="wip"|continuations?>>

=== Static typing ===
Eliom also improves the stability of your application by making an extensive use of OCaml's static typing. For example the validity of pages is checked at compile time!  Eliom also checks, for example, for broken hyperlinks links and that the parameters in a link or a form correspond to the service it leads to (among other things).

=== A client/server application in one piece of code! ===
One of the most significant features of Eliom is that can encompass both sides (client-side and server-side) of a Web application in a single program! The client side parts are automatically extracted and compiled into Javascript to be executed in the browser. The communication between the server is straightforward (in both directions), as you can use server side values in the client side code.

=== Security ===
Eliom helps you to make your Web application secure by automatically taking into account lots of security issues (code injection, session fixation~ ...), and by providing features to implement very secure behaviours (avoiding for example "cross-site request forgery").\\

\\

The first part of this manual is an overview of Ocsigen's features.
Read them to understand the basics.
Then refer to subsequent chapters to go into detail.

//Warning:// This programming guide assumes you know the
//Objective Caml// language, and that you have a working installation of //Ocsigen server//, //Eliom//, //Lwt//, //Js_of_ocaml//, (and //O'Closure// for some examples). In particular, you need to have the interfaces (cmi) installed for all these packages. They are sometimes in separate packages ("{{{-dev}}}" packages in Debian/Ubuntu). We recommend to use the packages from your distribution if they are available. If not, try to install all OCaml related packages with [[http://godi.camlcity.org|Godi]]. If it does not work, please report the problem to the package maintainers. We recommend to use the source packages only if you want to test unreleased features from development versions.
            

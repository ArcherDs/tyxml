description = "Extensions for Ocsigen"
version = "[distributed with Ocsigen]"
directory = "_MODULEINSTALLDIR_"

package "redirectmod" (
  exists_if = "redirectmod.cmo,redirectmod.cmxs"
  version = "[distributed with Ocsigen]"
  description = "HTTP redirections"
  archive(plugin,byte) = "redirectmod.cmo"
  archive(plugin,native) = "redirectmod.cmxs"
)

package "outputfilter" (
  exists_if = "outputfilter.cmo,outputfilter.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Changing HTTP answers before sending"
  archive(plugin,byte) = "outputfilter.cmo"
  archive(plugin,native) = "outputfilter.cmxs"
)

package "userconf" (
  exists_if = "userconf.cmo,userconf.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Allowing users to have their own configuration files"
  archive(plugin,byte) = "userconf.cmo"
  archive(plugin,native) = "userconf.cmxs"
)

package "staticmod" (
  exists_if = "staticmod.cmo,staticmod.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Serving static files"
  archive(plugin,byte) = "staticmod.cmo"
  archive(plugin,native) = "staticmod.cmxs"
)

package "revproxy" (
  exists_if = "revproxy.cmo,revproxy.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Reverse proxy"
  archive(plugin,byte) = "revproxy.cmo"
  archive(plugin,native) = "revproxy.cmxs"
)

package "accesscontrol" (
  exists_if = "accesscontrol.cmo,accesscontrol.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Filtering HTTP requests"
  archive(plugin,byte) = "accesscontrol.cmo"
  archive(plugin,native) = "accesscontrol.cmxs"
)

package "extendconfiguration" (
  exists_if = "extendconfiguration.cmo,extendconfiguration.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Updating server options"
  archive(plugin,byte) = "extendconfiguration.cmo"
  archive(plugin,native) = "extendconfiguration.cmxs"
)

package "authbasic" (
  exists_if = "authbasic.cmo,authbasic.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Basic HTTP Authentication"
  archive(plugin,byte) = "authbasic.cmo"
  archive(plugin,native) = "authbasic.cmxs"
)

package "cgimod" (
  exists_if = "cgimod.cmo,cgimod.cmxs"
  version = "[distributed with Ocsigen]"
  description = "CGI support"
  archive(plugin,byte) = "cgimod.cmo"
  archive(plugin,native) = "cgimod.cmxs"
)

package "ocsipersist-sqlite" (
  exists_if = "ocsipersist-sqlite.cma,ocsipersist-sqlite.cmxs"
  requires = "sqlite3"
  version = "[distributed with Ocsigen]"
  description = "Persistent data storage with SQLite3"
  archive(plugin,byte) = "ocsipersist-sqlite.cma"
  archive(plugin,native) = "ocsipersist-sqlite.cmxs"
)

package "ocsipersist-dbm" (
  exists_if = "ocsipersist-dbm.cma,ocsipersist-dbm.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Persistent data storage with DBM"
  archive(plugin,byte) = "ocsipersist-dbm.cma"
  archive(plugin,native) = "ocsipersist-dbm.cmxs"
)

package "eliom" (
  exists_if = "eliom.cma,eliom.cmxs"
  requires = "cryptokit"
  version = "[distributed with Ocsigen]"
  description = "Eliom: module for generating pages"
  archive(plugin,byte) = "eliom.cma"
  archive(plugin,native) = "eliom.cmxs"
)

package "deflatemod" (
  exists_if = "deflatemod.cmo,deflatemod.cmxs"
  requires = "_CAMLZIPNAME_"
  version = "[distributed with Ocsigen]"
  description = "Compressing HTTP reply bodies"
  archive(plugin,byte) = "deflatemod.cmo"
  archive(plugin,native) = "deflatemod.cmxs"
)

package "eliom_duce" (
  exists_if = "eliom_duce.cma,eliom_duce.cmxs"
  requires = "ocamlduce"
  version = "[distributed with Ocsigen]"
  description = "OCamlDuce support for Eliom"
  archive(plugin,byte) = "eliom_duce.cma"
  archive(plugin,native) = "eliom_duce.cmxs"
)

package "rewritemod" (
  exists_if = "rewritemod.cmo,rewritemod.cmxs"
  version = "[distributed with Ocsigen]"
  description = "Rewriting URLs"
  archive(plugin,byte) = "rewritemod.cmo"
  archive(plugin,native) = "rewritemod.cmxs"
)

package "eliom_obrowser" (
  exists_if = "eliom_obrowser.cmo"
  requires = ""
  version = "[distributed with Ocsigen]"
  description = "Using Eliom with OBrowser"
  archive(byte) = "eliom_obrowser.cmo"
)

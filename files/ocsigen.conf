<ocsigen>

  <server>

    <!-- ____________________________________________________________ -->
    <!-- First part: basic configuration                              -->

    <port>80</port>              <!-- The port for the server -->
    <!-- 
    <port protocol="HTTPS">443</port> 
    -->
       <!-- You can listen on several port, 
            and protocol may be HTTP (default) or HTTPS -->

    <logdir>_LOGDIR_</logdir>    <!-- Where log files are to be written -->
    <datadir>_DATADIR_</datadir> <!-- Where data are (default: _DATADIR_) -->
    <user>_OCSIGENUSER_</user>   <!-- The user who will run Ocsigen
                                      (do not use root for security reasons) -->
    <group>_OCSIGENGROUP_</group> <!-- The group (not root!) -->

    <charset>utf-8</charset>      <!-- Default charset for pages -->

    <!-- 
    <uploaddir></uploaddir>
     -->
      <!-- Where files are to be uploaded (default: none) -->

    <!-- 
    <maxuploadfilesize>2Mo</maxuploadfilesize>
     -->
      <!-- Max size of files sent to the server
           ("infinity" or using SI or binary units, 
           e.g. 10 10B 10o 10ko 10kB 10kiB 10MiB 10TB ...) -->

    <!-- 
    <maxrequestbodysize>8Mo</maxrequestbodysize>
     -->
      <!-- Max size for the body of a request
          ("infinity" or using SI or binary units) -->

    <!--
    <mimefile>/etc/mime.types</mimefile>
    -->
      <!-- The mime types file 
           used for sending static pages -->

    <!-- 
    <debugmode/> 
    -->
      <!-- If you want to print the exceptions on error 500 pages
           (use only for debug) -->

    <!-- If you want to use HTTPS:
    <ssl>
       <certificate>path_to/cert.pem</certificate>
       <privatekey>path_to/privkey.pem</privatekey>
    </ssl>

    To create a 1024-bit private key to use when creating your CA.:
    openssl genrsa -des3 -out privkey.pem 1024

    To create a master certificate based on this key, to use when signing other
    certificates:
    openssl req -new -x509 -days 1001 -key privkey.pem -out cert.pem

    If you don't want to be asked for a password at start-up, you can
    uncrypt the private key (if you consider it is safe ...):
    openssl rsa -in privkey.pem -out privkey-unsec.pem

    -->







    <!-- ____________________________________________________________ -->
    <!-- Second part: Ocsigen's Extensions                            -->

    <!-- 
         Ocsigen does not do anything without some extensions loaded.
         For example, you need the extension staticmod for serving static pages.

         Dynlink here all the extensions for Ocsigen using the tag <extension>.

         The order is usually not significant. 

         Extensions define new XML tags for this configuration file.
         Use them in the <site> sections below.

         If you don't have any extension, no page will be generated
         (but if you link the extensions statically).
     -->



    <!-- _______ Loading redirectmod _______ -->
    <!-- If you want to define HTTP redirections in this config file: -->
    <extension module="_MODULEINSTALLDIR_/redirectmod.cmo"/>


    
    <!-- _______ Loading revproxy _______ -->
    <!-- 
    If you want to define reverse proxy redirections in this config file:
    <extension module="_MODULEINSTALLDIR_/revproxy.cmo"/>
     -->

    
    <!-- _______ Loading accesscontrol _______ -->
    <!-- If you want to restrict access for some sites: -->
    <extension module="_MODULEINSTALLDIR_/accesscontrol.cmo"/>

    
    <!-- _______ Loading cgimod _______ -->
    <!-- 
    If you want to use CGI scripts:
    <extension module="_MODULEINSTALLDIR_/cgimod.cmo"/>
     -->

    <!-- Or, if you want to set options for cgimod: -->
    <!-- 
    <extension module="_MODULEINSTALLDIR_/cgimod.cmo">
      <cgitimeout value="30">     <!-- Timeout for CGI scripts -->
    </extension>
     -->

    

    <!-- _______ Loading staticmod _______ -->
    <!-- If you want to serve static files: -->
    <extension module="_MODULEINSTALLDIR_/staticmod.cmo"/>



    <!-- _______ Loading Eliom _______ -->
    <!-- If you need Eliom (dynamic OCaml pages),
         first load ocsipersist (sqlite or dbm version): -->

    <!-- Sqlite is needed by ocsipersist: -->
    <extension module="_OCAMLSQLITE3DIR_/sqlite3.cma"/>
    <extension module="_MODULEINSTALLDIR_/ocsipersist-sqlite.cma">
      <!-- If you want to specify the SQLITE database file yourself: 
      <database file="_DATADIR_/ocsidb"/> 
      -->
    </extension>

    <!-- You may want to use DBM instead of SQLite (if compiled) : -->
    <!--
    <extension module="_MODULEINSTALLDIR_/ocsipersist-dbm.cma">
      <store dir="_DATADIR_"/> <!-- The directory for data (optional) -->
      <ocsidbm name="_BINDIR_/ocsidbm"/> <!-- The data server process (optional) -->
    </extension>
    -->

    <!-- Eliom is also using Cryptokit to generate secure session id -->
    <extension module="_CRYPTOKITINSTALLDIR_/cryptokit.cma"/>

    <!-- Now you can load Eliom itself: -->
    <extension module="_ELIOMINSTALLDIR_/eliom.cma"/>

    <!-- 
      If you want to set some options for Eliom, replace last line by 
      something like:

    <extension module="_ELIOMINSTALLDIR_/eliom.cma">
      <timeout value="7200"/>      <!-- The default timeout for 
                                   volatile (in memory) sessions.
                                   value="infinity" means that the session will
                                   never finish.
                                   Note that each eliom module may set its own
                                   default, that will override this one. -->
      <persistenttimeout value="7200"/>
                                  <!-- Idem for persistent session data -->
      <datatimeout value="7200"/> <!-- Like <timeout>, but for in memory data
                                   sessions only
                                   (not service sessions). -->
      <servicetimeout value="7200"/> <!-- Like <timeout>, but for service
                                   sessions only 
                                   (not in memory data  sessions). -->
      <sessiongcfrequency value="7200"/> <!-- Time between two garbage
                                   collections of sessions, in seconds (default
                                   3600) "infinity" means no GC of session.
                                   Note that each eliom module may set its own
                                   default, that will override this one. -->
      <persistentsessiongcfrequency value="86400"/> <!-- Time between two
                                   garbage collections of persistent sessions, 
                                   in seconds (default 86400.) "infinity" 
                                   means no GC of session.
                                   Note that each eliom module may set its own
                                   default, that will override this one. -->
      <servicesessiongcfrequency value="7200"/> <!-- Like <sessiongcfrequency>,
                                   but for service sessions only -->
      <datasessiongcfrequency value="7200"/> <!-- Like <sessiongcfrequency>,
                                   but for "in memory data" sessions only -->
    </extension>
    -->



    <!-- If Ocsigen is compiled with Ocamlduce support, 
        and you want to use it, add:
    <extension module="...PATH TO.../ocamlduce.cma"/>
    <extension module="_ELIOMINSTALLDIR_/eliomduce.cma"/>
    -->



    <!-- _______ Loading deflatemod _______ -->
    <!-- 
      Deflatemod - compressing data before sending (deflate and gzip)
      Parameters are optionnal; here, they are set to their default values.

      <extension module="_CAMLZIPDIR_/camlzip.cma" /> <!-- Camlzip required -->
      <extension module="_MODULEINSTALLDIR_/deflatemod.cmo">
        <compress level="6" /> <!-- 1 = faster; 
                                    9 = best compression; 
                                    0 = no compression --> 
        <buffer size="1024" /> <!-- You shouldn't need to change this one -->
      </extension>
     
    -->




    <!-- _______ Loading other libraries _______ -->
    <!-- If you want to load other Ocaml modules, either use:

    <extension module="...PATH TO.../toto.cma"/>

    if you don't want them to be reloaded 
    when you reload dynamically the sites,
    or:

    <library module="...PATH TO.../toto.cma"/>

    if you want them to be reloaded.

    Extensions like eliom.cma or staticmod.cmo cannot be used with <library>
    -->










    <!-- ____________________________________________________________ -->
    <!-- Third part: Configuration of virtual hosts and sites         -->

    <!-- Inclusion of all external configuration files matching *.conf
     from this directory: -->
    <extconf dir="_CONFIGDIR_/conf" />

    <host charset="iso-8859-1">  <!-- First virtual host -->
      <!-- <host> is mandatory -->
      <!-- charset is optional (default "utf-8") -->

      <!-- Defining a sub-site -->
      <!-- The directory containing icons for directory listing
        (for directories configured "readable")
       -->
      <site path="ocsigenstuff" charset="iso-8859-1">
        <static dir="_STATICPAGESDIR_/ocsigenstuff" />
      </site>
      <!-- path is the directory where the site is loaded -->
      <!-- charset is optional -->
      <!-- It is possible to define <site> inside <site> -->


      <!-- Another example: a wiki written by Janne Hellsten: -->
      <site path="miniwiki" charset="utf-8">
        <static dir="_STATICPAGESDIR_/miniwiki" />
        <eliom module="_EXAMPLESINSTALLDIR_/miniwiki.cmo">
          <!-- Where to store Wiki pages -->
          <wikidata dir="_DATADIR_/miniwiki"/>
        </eliom>
      </site>

      <!-- Rewriting URLs with staticmod:

      Example of user pages
      <static regexp="~([^/]*)(.*)" dest="/home/$1/public_html$2"/>
      <!-- The syntax of regular expression is PCRE's one -->
      <!-- Better: if your users are not all in the same directory: -->
      <static regexp="~([^/]*)(.*)" dest="$$u($1)/public_html$2"/>
      -->

      <!-- If you want to allow users to have their config files:
      <userconf regexp="~([^/]*)(.*)" conf="$$u($1)/.ocsigen" prefix="~$1" url="$2"/>
      These files will be parsed for each request matching the regexp.
      All options are not available to users for security reasons.
      WARNING: this is an experimental feature! Please report any problem.
      -->

      <!-- catching HTTP errors with staticmod:
      <static code="40." regexp=".*" dest="/var/www/error.html"/>
      <!-- code value is a regular expression (here matching 400, 401 etc.).
      regexp is optional (matches the URL path).
      Note that if you want to catch all errors, 
      you need to create a separate <site path=""> after all others.
       -->
      -->


      <!-- Configuring a redirection with redirectmod:
      <redirect regexp="(.*)" dest="http://my.newaddress.org/$1"/>
      <redirect regexp="dir/(.*)\.html" dest="http://my.newaddress.org/$1.php"/>
      <!-- The syntax of regular expression is PCRE's one -->
      <!-- By default, permanent redirection. 
           For temporary redirection, use: -->
      <redirect temporary="temporary" regexp="(.*)" dest="http://www.plopplopplop.com/$1"/>
      -->



      <!-- Configuring a reverse proxy redirection with revproxy:
      <revproxy regexp="(.*)" server="my.newaddress.org" port="8080" uri="$1"/>
      <revproxy regexp="dir/(.*)\.html" protocol="https" server="my.newaddress.org" uri="$1.php"/>

      Add the attribute nopipeline="nopipeline" if you have a problem
      with the reverse proxy's pipeline. With that option, the reverse
      proxy will open a new connection for all requests, instead of trying
      to reuse connections. You probably don't need that, but if you do,
      please contact us to tell us what is the problem. Thank you!
      -->


      <!-- access control with extension accesscontrol: -->
      <!--
        Access control introduces the <filter> element: it takes as children
        conditions followed by extensions elements (they cannot be intermixed).
        When a request reaches a <filter>, the conditions are {and,or,nand,
        nor}-ed (depending on the type attribute), and if the resulting
        condition is true, then the extensions elements are tried.
        In either case, the extensions elements that occur after <filter> are
        tried as usual.
        If the attribute else="present" is present, then exactly two extension
        elements are expected after the conditions: the first will be tried if
        the conditions are true, and the second one will be tried otherwise.
        Note: {and,nor} with no condition is always true, and {or,nand} with
        no condition is always false. They can be used to group extensions
        with (else="true") filters.

        Here are some examples:

        I want <subsite/> to handle only requests from localhost, for users
        using the browser Konqueror:
        <filter type="and">
          <ip value="127.0.0.1" />
          <header name="user-agent" regexp=".*Konqueror.*" />
          <subsite/>
        </filter>

        I want <subsite/> to handle requests that respect at least one of the
        following conditions:
         - they belong to the subnet 123.123.123.0/24,
         - or they want to access a page beginning with the letter 'c'
         - or they are not doing a GET HTTP request
        <filter type="or">
          <ip value="123.123.123.0/24" />
          <path regexp="/c.*" />
          <nand><method value="GET" /></nand>
          <subsite/>
        </filter>

        I want to deny access to <subsite/> to 192.168.0.0/24 except
        192.168.0.42, and to 192.168.99.0/24:
        <filter type="or">
          <ip value="192.168.0.42" />
          <nand>
            <ip value="192.168.0.42" />
            <ip value="192.168.99.0/24" />
          </nand>
          <subsite/>
        </filter>

        Access control defines also serveral additional extension elements:

        I want to answer to the request with a 404 error without trying
        the following sites (if nobody answered before):
        <notfound/>

        I want to answer to the request with a 403 error without trying
        the following sites (if nobody answered before):
        <forbidden/>

        I want some extensions to be tried only if something has answered
        before:
        <iffound>
          <deflate ...>
        </iffound>

        I want some extension to be tried only if nobody answered before:
        <ifnotfound>
          <eliom ...>
          <deflate ...>
        </ifnotfound>
        The following will match only "not found" with error code 403:
        <ifnotfound code="403">
          <eliom ...>
        </iffound>
        The value of "code" attribute is a regular expression.

        -->


      <!-- If Ocsigen is compiled with Ocamlduce support, 
        you may add:
      <site path="duce" charset="iso-8859-1"> 
        <eliom module="_EXAMPLESINSTALLDIR_/exampleduce.cmo" />
      </site>
        Warning: exampleduce.cmo depends on tutoeliom.cmo 
        (must be dynlinked before)!
        The current tutoeliom answers even if the page does not exist.
        If you want to prevent it to answer to pages beginning with /duce, 
        add access control extension and
        put these lines before the line containing tutoeliom.cmo above:
        <deny type="and">
          <filter type="path" regexp="/duce.*"/>
        </deny>
      -->


      <!-- A page displaying information about the Web server
        (memory used, number of threads, etc.):
      <site path="monitoring">
        <!-- Monitoring -->
        <eliom module="_EXAMPLESINSTALLDIR_/monitoring.cmo" />
      </site>
      -->


      <!-- Here are example of configuration for CGI script,
           if you use cgimod:
      <site path="cgi">

            Short form (no regular expression allowed):
           <cgi root="cgi-bin" 
                dir="/usr/lib/cgi-bin" /> 

            This is equivalent to the long form (using regular expressions):
           <cgi regexp="cgi-bin/([^/]*)" 
                dir="/usr/lib/cgi-bin/" 
                script="$1" />

            Another example:
           <cgi regexp="darcsweb" 
                dir="/usr/lib/cgi-bin/" 
                script="darcsweb.cgi" />

            An example defining its own environment variable:
           <cgi regexp="trac" 
                dir="/usr/lib/cgi-bin/" 
                script="trac.cgi" >
             <setenv var="TRAC_ENV" 
                     val="/usr/share/trac" />
           </cgi>

            To use PHP as a CGI module:

            - user pages:
           <cgi regexp="~([^/]*)(.*)/" 
                dir="$$u($1)/public_html/$2" 
                script="index.php" 
                exec="/usr/bin/php-cgi"/>
           <cgi regexp="~([^/]*)(.*)/([^/]*).php" 
                dir="$$u($1)/public_html$2" 
                script="$3.php" 
                exec="/usr/bin/php-cgi"/>

            - other pages:
           <cgi regexp="(.*)/" 
                dir="/var/www/$1" 
                script="index.php" 
                exec="/usr/bin/php-cgi"/>
           <cgi regexp="((.*)/)?([^/]*).php" 
                dir="/var/www/$2" 
                script="$3.php" 
                exec="/usr/bin/php-cgi"/>

      </site>
      -->

      <!-- Use here the tags defined by the extensions you loaded.
           Warning: the order is significant!
           Each option may 
            - generate a page
            - ask the following option to try to answer
            - prevent the following options to try 
            - modify the result given by one of the previous options
            - etc.
      -->


      <!-- Tutorial -->

      <!-- We first try to deliver a static page: -->
      <static dir="_STATICPAGESDIR_/tutorial" />
      <!-- If it does not exist, we try do generate a dynamic page: -->
      <eliom module="_EXAMPLESINSTALLDIR_/tutoeliom.cmo" />


      <!-- If you want the content of the directory (and subdirectories) 
      to be displayed:
      <static dir="_STATICPAGESDIR_/tutorial" readable="readable" />
      -->

      <!-- Deflatemod (at the very end to filter everything else) -->
      <!--
	  <deflate compress="allbut">
	    <type>image/*</type>
		<extension>.tar.gz</extension>
	  </deflate> 
	  -->
 
    </host>

    <!-- 
    <host name="*.com">      <!-- Another virtual host -->
    </host>

       If your server has several host names, you can decide which sites will
       be available for each name, using virtual servers.
       To use virtual servers, specify for <host> the attribute 'name'.
       'name' is a string that may contain '*' characters.
       Examples: <host name="*">...</host> will match any host name (default).
       <host name="*.com:80">...</host> will match any host name finishing 
       with '.com' on port 80.
       <host name="www.mysite.com www.mysite.org:*">...</host> 
	will match only those two hostnames.
     -->
  









    <!-- ____________________________________________________________ -->
    <!-- Fourth part: various settings                                -->

    <!-- Change the following values only if you know what you are doing! -->
    <!-- <maxconnected>500</maxconnected> Max number of simultaneous connections -->
    <!-- <clienttimeout>10</clienttimeout> Timeout when a client is silent during while doing a request (or for keep alive) -->
    <!-- <servertimeout>100</servertimeout> When using Ocsigen as a client: Timeout when a server is silent during answering a request (or for keep alive) -->
    <!-- <netbuffersize>8192</netbuffersize> Size of the input buffer (sockets) It is also the maximum size of headers and post data -->
    <!-- <filebuffersize>8192</filebuffersize> Size of the buffer for reading files -->
    <!-- <minthreads>10</minthreads> Minimum size of the detached threads pool (default 10) -->
    <!-- <maxthreads>1000</maxthreads> Maximal size of the detached threads pool (default 300) -->
    <!-- <maxdetachedcomputationsqueued>100</maxdetachedcomputationsqueued> Size of the queue of computations waiting a detached thread (default 100) -->
    <!-- <commandpipe>_COMMANDPIPE_</commandpipe> Name of the pipe used to command the server -->
    <!-- <respectpipeline/> If this line is present, one request will be sent to extensions only when the server is sure that the previous one on the same connection has been taken by an extension. By default, the order may be changed. -->

  </server>
  
</ocsigen>


<!-- ?xml version="1.0" encoding="ISO-8859-1"? -->
<ocsigen>
    <!-- Each <server> tag describes a different server process: 
	they must listen on different ports 
    -->
  <server>
    <port>80</port> <!-- The port for the server -->
    <!-- <port protocol="HTTPS">443</port> You can listen on several port, and protocol may be HTTP (default) or HTTPS -->
    <logdir>_LOGDIR_</logdir> <!-- Where log files are to be written -->
    <staticdir>_STATICPAGESDIR_</staticdir> <!-- Where static pages are (default: none) -->
    <user>_OCSIGENUSER_</user> <!-- The user who will run Ocsigen (not root!) -->
    <group>_OCSIGENGROUP_</group> <!-- The group (not root!) -->

    <charset>utf-8</charset> <!-- Default charset for pages -->
    <!-- uploaddir></uploaddir --> <!-- Where files are to be downloaded (default: none) -->
    <!-- maxuploadfilesize>2Mo</maxuploadfilesize --> <!-- Max size of files sent to the server ("infinity" or using SI or binary units, e.g. 10 10B 10o 10ko 10kB 10kiB 10MiB 10TB ...) -->
    <!-- maxrequestbodysize>8Mo</maxrequestbodysize --> <!-- Max size for the body of a request ("infinity" or using SI or binary units) -->
    <!--<mimefile>/etc/mime.types</mimefile> The mime types file 
                          used for sending static pages -->


    <!-- If you want to use HTTPS:
    <ssl>
       <certificate>path_to/cert.pem</certificate>
       <privatekey>path_to/privkey.pem</privatekey>
    </ssl>

    To create a 1024-bit private key to use when creating your CA.:
    openssl genrsa -des3 -out privkey.pem 1024

    To create a master certificate based on this key, to use when signing other
    certificates:
    openssl req -new -x509 -days 1001 -key privkey.pem -out cert.pem

    If you don't want to be asked for a password at start-up, you can
    uncrypt the private key (if you consider it is safe ...):
    openssl rsa -in privkey.pem -out privkey-unsec.pem

    -->

    <!-- Ocsigen extensions.
         Dynlink here all the extensions (modules).
         Warning: The order in important! (as they will try to handle
         requests in that order)
         (for example a proxy extension must be loaded before all page
         generating extensions, as it catches the request before it is
         fully read)
         You probably need staticmod and ocsigenmod, in that order,
         the first one to generate static pages,
         the second one for dynamic pages.
         If you don't have any extension, no page will be generated
         (but if you link the extensions statically).
     -->
    <dynlink module="_MODULEINSTALLDIR_/staticmod.cmo"/>
    <dynlink module="_MODULEINSTALLDIR_/eliom.cma"/>

    <!-- For compatibility with sites developped with old versions (< 0.7): -->
    <!-- dynlink>_MODULEINSTALLDIR_/ocsigenmod.cma</dynlink -->

    <!-- If Ocsigen is compiled with Ocamlduce support, 
        and you want to use it, add:
    <dynlink module="...PATH TO.../ocamlduce.cma"/>
    <dynlink module="_MODULEINSTALLDIR_/ocsigenmod.cma"/>
    -->

    <!--
    <!-- If you want to load other Ocaml modules: -->
    <dynlink module="...PATH TO.../toto.cma"/>
    -->

    <host>  
      <!-- Now attach each Eliom module to an URL 
           (and possibly to a directory for its static pages) -->
      <site dir="" charset="iso-8859-1"> 
        <!-- dir is the directory where the site is loaded -->
        <!-- charset is optional -->
        <!-- Tutorial -->
        <eliom module="_EXAMPLESINSTALLDIR_/tutoeliom.cmo" />
        <static dir="_STATICPAGESDIR_/tutorial" />
      </site>

      <!-- If Ocsigen is compiled with Ocamlduce support, 
        you may add:
      <site dir="duce" charset="iso-8859-1"> 
        <eliom module="_EXAMPLESINSTALLDIR_/exampleduce.cmo" />
      </site>
        Warning: exampleduce.cmo depends on tutorial.cmo 
        (must be dynlinked before)!
      -->

      <!--
      <site dir="monitoring">
        <!-- Monitoring -->
        <eliom module="_EXAMPLESINSTALLDIR_/monitoring.cmo" />
      </site>
      -->
    </host>

    <!-- 
    <host name="*.com">
    </host>

       If your server has several host names, you can decide which sites will
       be available for each name, using virtual servers.
       To use virtual servers, specify for <host> the attribute 'name'.
       'name' is a string that may contain '*' characters.
       Examples: <host name="*">...</host> will match any host name (default).
       <host name="*.com:80">...</host> will match any host name finishing 
       with '.com' on port 80.
       <host name="www.mysite.com www.mysite.org:*">...</host> 
	will match only those two hostnames.
     -->
  

    <!-- Change the following values only if you know what you are doing! -->
    <!-- <maxconnected>500</maxconnected> Max number of simultaneous connections -->
    <!-- <timeout>20</timeout> Timeout for connections -->
    <!-- <keepalivetimeout>10</keepalivetimeout> Amount of time the server will wait for subsequent requests on a persistent connection -->
    <!-- <netbuffersize>8192</netbuffersize> Size of the input buffer (sockets) It is also the maximum size of headers and post data (version 0.5.0) -->
    <!-- <filebuffersize>8192</filebuffersize> Size of the buffer for reading files -->
    <!-- <minthreads>10</minthreads> Minimum size of the detached threads pool (default 10) -->
    <!-- <maxthreads>1000</maxthreads> Maximal size of the detached threads pool (default 300) -->
    <!-- <maxdetachedcomputationsqueued>100</maxdetachedcomputationsqueued> Size of the queue of computations waiting a detached thread (default 100) -->

  </server>

  <!-- If you want another server processes, running on other ports ...
  <server> 
  </server> 
  -->
  
</ocsigen>

(* Warning! ocsiconfig.ml is generated automatically from ocsiconfig.ml.IN!
   Do not modify it manually *)
(* Ocsigen
 * Copyright (C) 2005 Vincent Balat
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *)


exception Config_file_error of string
let number_of_servers = ref 0

type virtual_host_part = Text of string * int | Wildcard
type virtual_hosts = virtual_host_part list list

let rec host_match host =
  let hostlen = String.length host in
  let rec host_match1 beg =
    let rec aux t len l p0 =
      try 
	let (p,_) = 
	  Netstring_str.search_forward (Netstring_str.regexp t) host p0 in
	let beg2 = p + len in
	(host_match1 beg2 l) || (aux t len l (p+1))
      with _ -> false
    in
    function
	[] -> beg = hostlen
      | [Wildcard] -> true
      | (Wildcard)::(Wildcard)::l -> 
	  host_match1 beg ((Wildcard)::l)
      | (Wildcard)::(Text (t,len))::l -> aux t len l beg
      | (Text (t,len))::l -> 
	  try
	    (t = String.sub host beg len) && (host_match1 (beg+len) l)
	  with _ -> false
  in
  function
      [] -> false
    | a::l -> (host_match1 0 a) || host_match host l

let string_of_host h = 
  let rec aux = function
      [] -> ""
    | Wildcard::l -> "*"^(aux l)
    | (Text (t,_))::l -> t^(aux l)
  in List.fold_left (fun d hh -> d^(aux hh)^" ") "" h



type modules = Cmo of string | Mod of virtual_hosts * string list * string
type static_dir = Static_dir of string option * (string * static_dir) list
type config = { mutable port: int;
		mutable port_modified: bool;
		mutable modu: modules list;
		mutable ssl: bool;
		mutable private_key: string;
		mutable certificate: string;
		mutable passwd: string;
		mutable uploaddir: string;
		mutable logdir: string;
		mutable static_tree: (virtual_hosts * static_dir ref) list;
		mutable default_static_tree: static_dir;
		mutable user: string;
		mutable group: string;
		mutable minthreads: int;
		mutable maxthreads: int;
		mutable max_number_of_threads_queued: int;
		mutable max_number_of_connections: int;
		mutable mimefile: string;
		mutable connect_time_max: float;
		mutable keepalive_timeout: float;
	 }

let config_file = ref "_CONFIGDIR_/ocsigen.conf"
let verbose = ref false
let silent = ref false
let veryverbose = ref false
let version_number = (**)"0000000000000000"(**)
let mimefile = ref "_CONFIGDIR_/mime.types"

let init_config () = 
  {port = 80; port_modified = false; ssl = false;
   modu = [];
   private_key = ""; certificate = ""; passwd = ""; 
   uploaddir = "_UP_"; logdir = "_LOGDIR_"; 
   static_tree = [];
   default_static_tree = Static_dir (Some "_STATICPAGESDIR_", []);
   user = "_OCSIGENUSER_"; group = "_OCSIGENGROUP_";
   minthreads = 10; 
   maxthreads = 300; 
   max_number_of_threads_queued = 100;
   max_number_of_connections = 500;
   mimefile = "_CONFIGDIR_/mime.types"; 
   connect_time_max = 60.;
   keepalive_timeout = 15.
 }
let sconf  = ref (init_config ())
let cfgs : config list ref = ref [](*(Array.init max_servers (init_config))*) 
let set_port cf i = cf.port <- i; cf.port_modified <- true
let get_port_n cf = cf.port
let set_modules cf m = cf.modu <- m
let get_port_n_modif cf = cf.port_modified
let set_ssl cf b = cf.ssl <- b
let get_ssl_n cf = cf.ssl
let set_key cf k = cf.private_key <- k
let set_certificate cf c = cf.certificate <- c
let set_passwd cf p = cf.passwd <- p
let set_uploaddir cf u = cf.uploaddir <- u
let set_logdir cf s = cf.logdir <- s
let set_configfile s = config_file := s
let set_default_static_tree cf s = 
  (cf).default_static_tree <- Static_dir (Some "_STATICPAGESDIR_", [])
let set_mimefile cf s = cf.mimefile <- s
let set_verbose () = verbose := true
let set_silent () = silent := true
let set_veryverbose () = verbose := true; veryverbose := true
let set_user cf s = cf.user <- s
let set_group cf s = cf.group <- s
let set_minthreads cf i = cf.minthreads <- i
let set_maxthreads cf i = cf.maxthreads <- i
let set_max_number_of_threads_queued cf i = 
  cf.max_number_of_threads_queued <- i
let set_max_number_of_connections cf i = cf.max_number_of_connections <- i
let set_connect_time_max cf i = cf.connect_time_max <- i
let set_keepalive_timeout cf i = cf.keepalive_timeout <- i
let set_number_of_servers x = number_of_servers := x
let get_port () = !sconf.port
let get_port_modified () = !sconf.port_modified
let get_modules cf = !sconf.modu
let get_ssl () = !sconf.ssl
let get_key () = !sconf.private_key
let get_certificate () = !sconf.certificate
let get_passwd () = !sconf.passwd
let get_uploaddir () = !sconf.uploaddir
let get_logdir () = !sconf.logdir
let get_config_file () = !config_file
let get_mimefile () = !sconf.mimefile
let get_verbose () = !verbose
let get_silent () = !silent
let get_veryverbose () = !veryverbose
let get_static_tree () = !sconf.static_tree
let get_default_static_tree () = !sconf.default_static_tree
let get_user () = !sconf.user
let get_group () = !sconf.group
let get_minthreads () = !sconf.minthreads
let get_maxthreads () = !sconf.maxthreads
let get_max_number_of_threads_queued () = !sconf.max_number_of_threads_queued
let get_max_number_of_connections () = !sconf.max_number_of_connections
let get_connect_time_max () = !sconf.connect_time_max
let get_keepalive_timeout () = !sconf.keepalive_timeout

let set_static_dir cf host s path =
  let rec assoc_and_remove a = function
      [] -> raise Not_found
    | (b,v)::l when a = b -> (v,l)
    | e::l -> let v,ll = assoc_and_remove a l
	  in v,(e::ll)
  in
  let rec add_path = function
      [] -> Static_dir (Some s,[])
    | a::l -> Static_dir (None, [(a,add_path l)])
  in
  let rec aux (Static_dir (s1,l1)) = function
      [] -> Static_dir (Some s,l1)
    | a::l -> 
	try
	  let sd1,l2 = assoc_and_remove a l1 in
	  let sd = aux sd1 l in
	  Static_dir (s1,(a,sd)::l2)
	with Not_found -> Static_dir (s1,(a,(add_path l))::l1)
  in
  let find_add_static_dir () = 
    let rec auxx = function
	[] -> let r = ref (Static_dir ((Some "_STATICPAGESDIR_"),[])) in
	(cf).static_tree <- 
	  (host,r)::(cf).static_tree (* new one at the beginning *);
	r
      | (h,r)::_ when h == host (* physical equality *) -> r
      | _::l -> auxx l
    in auxx (cf).static_tree 
  in
  print_endline ("set_static_dir "^(string_of_host host));
  let static_dir = find_add_static_dir () in
  static_dir := aux !static_dir path

let display_version () =
  print_string version_number;
  print_newline ();
  exit 0

let print_location loc =
  Printf.sprintf "%d-%d" (fst loc).Lexing.pos_cnum (snd loc).Lexing.pos_cnum


let _ = Arg.parse
    [("-c", Arg.String set_configfile, 
      "Alternate config file (default _CONFIGDIR_/ocsigen.conf");
     ("-s", Arg.Unit set_silent, "Silent mode (erroe messages in errors.log only)");
     ("-v", Arg.Unit set_verbose, "Verbose mode");
     ("-vv", Arg.Unit set_veryverbose, "Very verbose mode (debug)");
     ("-version", Arg.Unit display_version, "Display version number and exit")
   ]
    (fun _ -> ())
    "usage: ocsigen [-c configfile]"

let config = 
  try
    Simplexmlparser.xmlparser (get_config_file ())
  with
    Stdpp.Exc_located (fl,exn) -> 
      Printf.eprintf "%s" 
	("Syntax error in config file at location : "^(print_location fl));
      raise exn






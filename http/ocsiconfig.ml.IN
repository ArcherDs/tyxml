(* Warning! ocsiconfig.ml is generated automatically from ocsiconfig.ml.IN!
   Do not modify it manually *)
(* Ocsigen
 * Copyright (C) 2005 Vincent Balat
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
 *)


exception Config_file_error of string
let max_servers = 10
let number_of_servers = ref 0

type static_dir = Static_dir of string option * (string * static_dir) list
type config = { mutable port: int;
		mutable virt: bool;
		mutable ssl: bool;
		mutable private_key: string;
		mutable certificate: string;
		mutable passwd: string;
		mutable uploaddir: string;
		mutable logdir: string;
		mutable static_tree: static_dir;
		mutable user: string;
		mutable group: string;
		mutable max_number_of_connections: int;
		mutable connect_time_max: float }

let config_file = ref "_CONFIGDIR_/ocsigen.conf"
let verbose = ref false
let silent = ref false
let veryverbose = ref false
let version_number = (**)"0000000000000000"(**)
let mimefile = ref "_CONFIGDIR_/mime.types"

let init_config n = {port = 80; virt = false; ssl = false; 
		      private_key = ""; certificate = ""; passwd = ""; 
		      uploaddir = "_UP_"; logdir = "_LOGDIR_"; 
		      static_tree = (Static_dir (Some "_STATICPAGESDIR_", []));
		      user = "_OCSIGENUSER_"; group = "_OCSIGENGROUP_";
		      max_number_of_connections = 500;
		      connect_time_max = 300. }
let sconf  = ref (init_config 0)
let cfgs = ref (Array.init max_servers (init_config)) 
let set_port n i = !cfgs.(n).port <- i
let get_port_n n = !cfgs.(n).port
let set_virtual n b = !cfgs.(n).virt <- b
let get_virtual_n n = !cfgs.(n).virt
let set_ssl  n b = !cfgs.(n).ssl <- b
let get_ssl_n n = !cfgs.(n).ssl
let set_key n k = !cfgs.(n).private_key <- k
let set_certificate n c = !cfgs.(n).certificate <- c
let set_passwd n p = !cfgs.(n).passwd <- p
let set_uploaddir n u = !cfgs.(n).uploaddir <- u
let set_logdir n s = !cfgs.(n).logdir <- s
let set_configfile s = config_file := s
let set_mimefile s = mimefile := s
let set_verbose () = verbose := true
let set_silent () = silent := true
let set_veryverbose () = verbose := true; veryverbose := true
let set_user n s = !cfgs.(n).user <- s
let set_group n s = !cfgs.(n).group <- s
let set_max_number_of_connections n i = !cfgs.(n).max_number_of_connections <- i
let set_connect_time_max n i = !cfgs.(n).connect_time_max <- i
let set_number_of_servers x = number_of_servers := x
let get_port () = !sconf.port
let get_virtual () = !sconf.virt
let get_ssl () = !sconf.ssl
let get_key () = !sconf.private_key
let get_certificate () = !sconf.certificate
let get_passwd () = !sconf.passwd
let get_uploaddir () = !sconf.uploaddir
let get_logdir () = !sconf.logdir
let get_config_file () = !config_file
let get_mimefile () = !mimefile
let get_verbose () = !verbose
let get_silent () = !silent
let get_veryverbose () = !veryverbose
let get_static_tree () = !sconf.static_tree
let get_user () = !sconf.user
let get_group () = !sconf.group
let get_max_number_of_connections () = !sconf.max_number_of_connections
let get_connect_time_max () = !sconf.connect_time_max

let set_static_dir n s path =
  let rec assoc_and_remove a = function
      [] -> raise Not_found
    | (b,v)::l when a = b -> (v,l)
    | e::l -> let v,ll = assoc_and_remove a l
	  in v,(e::ll)
  in
  let rec add_path = function
      [] -> Static_dir (Some s,[])
    | a::l -> Static_dir (None, [(a,add_path l)])
  in
  let rec aux (Static_dir (s1,l1)) = function
      [] -> Static_dir (Some s,l1)
    | a::l -> 
	try
	  let sd1,l2 = assoc_and_remove a l1 in
	  let sd = aux sd1 l in
	  Static_dir (s1,(a,sd)::l2)
	with Not_found -> Static_dir (s1,(a,(add_path l))::l1)
  in (!cfgs.(n)).static_tree <- aux (!cfgs.(n)).static_tree path

let set_staticpages n s = set_static_dir n s []

let display_version () =
  print_string version_number;
  print_newline ();
  exit 0

let print_location loc =
  Printf.sprintf "%d-%d" (fst loc).Lexing.pos_cnum (snd loc).Lexing.pos_cnum


let _ = Arg.parse
    [("-c", Arg.String set_configfile, 
      "Alternate config file (default _CONFIGDIR_/ocsigen.conf");
     ("-s", Arg.Unit set_silent, "Silent mode (erroe messages in errors.log only)");
     ("-v", Arg.Unit set_verbose, "Verbose mode");
     ("-vv", Arg.Unit set_veryverbose, "Very verbose mode (debug)");
     ("-version", Arg.Unit display_version, "Display version number and exit")
   ]
    (fun _ -> ())
    "usage: ocsigen [-c configfile]"

let config = 
  try
    Simplexmlparser.xmlparser (get_config_file ())
  with
    Stdpp.Exc_located (fl,exn) -> 
      Printf.eprintf "%s" 
	("Syntax error in config file at location : "^(print_location fl));
      raise exn





